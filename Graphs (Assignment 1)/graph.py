import networkx as nx
import matplotlib.pyplot as plt
import math
import argparse

parser = argparse.ArgumentParser(description='Graph Parser')
parser.add_argument("--input", type=str, help="Graph input file")
parser.add_argument("--create_random_graph", nargs="+", type=float, help="Create a random graph with n nodes generated by a constant c")
parser.add_argument("--BFS", type=int, help="Specifies a node to compute all shortest paths from using the BFS algorithm")
parser.add_argument("--plot", action="store_true", help="Plot the graph")
parser.add_argument("--output", type=str, help="Output file to store the graph")

def erdos_renyi_graph(n, c):
    probability = ((c * math.log(n)) / n)
    graph = nx.erdos_renyi_graph(n, probability)
    graph = nx.relabel_nodes(graph, {node: str(node) for node in graph.nodes()})
    return graph

def BFS(graph, root):
    root = str(root)
    graph = nx.bfs_tree(graph, root)
    nx.draw(graph, nx.bfs_layout(graph, root), with_labels=True)
    plt.show()
    
def plotGraph(graph):
    nx.draw(graph, with_labels=True)
    plt.show()

def main():
    args = parser.parse_args()
    if (args.input):
        input = args.input
        inputGraph = nx.read_gml(input)
    if (args.create_random_graph):
        nodes = int(args.create_random_graph[0])
        constant = args.create_random_graph[1]
        inputGraph = erdos_renyi_graph(nodes, constant)
    if (args.BFS):  
        BFSroot = args.BFS
        BFS(inputGraph, BFSroot)
    if (args.plot):
        plotGraph(inputGraph)
    if (args.output):
        output = args.output
        nx.write_gml(inputGraph, output)

if __name__ == "__main__":
    main()
